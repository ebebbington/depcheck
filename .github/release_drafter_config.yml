name-template: 'v$RESOLVED_VERSION'
tag-template: 'v$RESOLVED_VERSION'

# Used to group together pull requests. See the docs for more info, but we don't need this as we have our own custom format
#categories:
#   - title: 'üöÄ Features'
#     labels:
#       - 'feature'
#       - 'enhancement'
#   - title: 'üêõ Bug Fixes'
#     labels:
#       - 'fix'
#       - 'bugfix'
#       - 'bug'
#   - title: 'üß∞ Maintenance'
#     label: 'chore'

change-template: '- $TITLE (#$NUMBER)'

# Only add to the draft release when a PR has one of these labels
include-labels:
  - 'major'
  - 'minor'
  - 'patch'
  - 'chore'

# Here is how we determine what version the release would be, by using labels. Eg when "minor" is used, the drafter knows to bump up to a new minor version
version-resolver:
  major:
    labels:
      - 'major'
  minor:
    labels:
      - 'minor'
  patch:
    labels:
      - 'patch'
      - 'chore' # allow our chore PR's to just be patches too
  default: patch

# What our release will look like. If no draft has been created, then this will be used, otherwise $CHANGES just gets addedd
template: |
  __Compatibility__

  * Requires Deno v<DENO_VERSION> or higher
  * Uses Deno std@<STD_VERSION>

  __Importing__

  * Run the latest release by using the following in your project(s):
    ```typescript
    deno run --allow-read='.' https://deno.land/x/depcheck@v$RESOLVED_VERSION/mod.ts
    ```
  * Or install:
    ```
    deno install -f --allow-read='.' https://deno.land/x/depcheck@$RESOLVED_VERSION/mod.ts
    ```

  __Updates__

  $CHANGES